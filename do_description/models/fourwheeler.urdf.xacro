<?xml version="1.0" ?>
<robot name="fourwheeler" xmlns:xacro="http://ros.org/wiki/xacro">

    <xacro:property name="base_width" value="0.42"/>
    <xacro:property name="base_length" value="0.40"/>
    <xacro:property name="base_height" value="0.125"/>
    <xacro:property name="base_mass" value="30"/>

    <xacro:property name="wheel_radius" value="0.075"/>
    <xacro:property name="wheel_width" value="0.05"/>
    <xacro:property name="wheel_mass" value="0.5"/>

    <xacro:property name="bumper_length" value="0.04" />
    <xacro:property name="bumper_width" value="0.5" />
    <xacro:property name="bumper_height" value="0.125" />
    <xacro:property name="bumper_mass" value="1" />

    <xacro:property name="wheel_ygap" value="0.03"/>

    <!-- Position the wheels along the z-axis -->
    <xacro:property name="wheel_zoff" value="0.05"/>

    <!-- Position the wheels along the x-axis -->
    <xacro:property name="wheel_xoff" value="0.1"/>

  <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="fourwheeler_base_macro">
    <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
    <!-- Define the center of the main robot chassis projected on the ground -->	
    <link name="base_footprint"/>

    <!-- The base footprint of the robot is located underneath the chassis -->
    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link" />
        <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
    </joint>


    <!-- ********************** ROBOT BASE *********************************  -->
    <link name="base_link">
        <visual>
        <origin xyz="0 0 -${wheel_zoff}" rpy="0 0 0"/>
        <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/>
        </geometry>
        <material name="Red">
            <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
        </material>
        </visual>

        <collision>
        <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/>
        </geometry>
        </collision>

        <xacro:box_inertia m="${base_mass}" w="${base_width}" d="${base_length}" h="${base_height}"/>
        
    </link>

    <gazebo reference="base_link">
        <material>Gazebo/Red</material>
    </gazebo>

    <joint name="fbumper_joint" type="fixed">
        <parent link="base_link"/>
        <child link="fbumper_link" />
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>

    <link name="fbumper_link">
        <visual>
        <origin xyz="${(base_length/2 + bumper_length/2)} 0 -${wheel_zoff}" rpy="0 0 0"/>
        <geometry>
            <box size="${bumper_length} ${bumper_width} ${bumper_height}"/>
        </geometry>
        <material name="Red">
            <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
        </material>
        </visual>

        <collision>
        <geometry>
            <box size="${bumper_length} ${bumper_width} ${bumper_height}"/>

        </geometry>
        </collision>

        <xacro:box_inertia m="${bumper_mass}" w="${bumper_width}" d="${bumper_length}" h="${bumper_height}"/>

    </link>

    <gazebo reference="fbumper_link">
        <material>Gazebo/Red</material>
    </gazebo>
    
    <joint name="rbumper_joint" type="fixed">
        <parent link="base_link"/>
        <child link="rbumper_link" />
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>

    <link name="rbumper_link">
        <visual>
        <origin xyz="-${(base_length/2 + bumper_length/2)} 0 -${wheel_zoff}" rpy="0 0 0"/>
        <geometry>
            <box size="${bumper_length} ${bumper_width} ${bumper_height}"/>
        </geometry>
        <material name="Red">
            <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
        </material>
        </visual>

        <collision>
        <geometry>
            <box size="${bumper_length} ${bumper_width} ${bumper_height}"/>

        </geometry>
        </collision>

        <xacro:box_inertia m="${bumper_mass}" w="${bumper_width}" d="${bumper_length}" h="${bumper_height}"/>

    </link>

    <gazebo reference="rbumper_link">
        <material>Gazebo/Red</material>
    </gazebo>
    
    <!-- *********************** DRIVE WHEELS ******************************  -->

    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.5707963267949 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="White">
            <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
            </material>
        </visual>
        
        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>
        
        <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
        
        </link>


        <!-- Connect the wheels to the base_link at the appropriate location, and 
            define a continuous joint to allow the wheels to freely rotate about
            an axis -->
        <joint name="${prefix}_joint" type="revolute">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
        <limit upper="3.1415" lower="-3.1415" effort="30" velocity="5.0"/>
        <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <!-- Instantiate two wheels using the macro we just made through the 
        xacro:wheel tags. We also define the parameters to have one wheel
        on both sides at the back of our robot (i.e. x_reflect=-1). -->
    <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1" />
    <xacro:wheel prefix="rearwhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel prefix="rearwhl_r" x_reflect="-1" y_reflect="-1" />

    <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
        <ros>
        <namespace>/</namespace>
        </ros>

        <!-- wheels -->
        <left_joint>drivewhl_l_joint</left_joint>
        <right_joint>drivewhl_r_joint</right_joint>

        <!-- kinematics -->
        <wheel_separation>0.2</wheel_separation>
        <wheel_diameter>0.15</wheel_diameter>

        <!-- limits -->
        <max_wheel_torque>20</max_wheel_torque>
        <max_wheel_acceleration>1.0</max_wheel_acceleration>

        <!-- output -->
        <publish_odom>true</publish_odom>
        <publish_odom_tf>false</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>

        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>
    </plugin>
    </gazebo>

</xacro:macro>
</robot>